<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="4" failed="2" ignored="0" total="36" passed="30">
  <reporter-output>
  </reporter-output>
  <suite name="DANA Pulsa Suite" duration-ms="859957" started-at="2020-06-22T14:17:48Z" finished-at="2020-06-22T14:32:08Z">
    <groups>
    </groups>
    <test name="DANA Pulsa API Test Payment - Pay Order" duration-ms="859957" started-at="2020-06-22T14:17:48Z" finished-at="2020-06-22T14:32:08Z">
      <class name="testCases.payment.TC_Pay_Order">
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="52" started-at="2020-06-22T14:17:48Z" finished-at="2020-06-22T14:17:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="77474" started-at="2020-06-22T14:17:48Z" finished-at="2020-06-22T14:19:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@12aba8be]" name="testPayOrder" duration-ms="6043" started-at="2020-06-22T14:19:06Z" finished-at="2020-06-22T14:19:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@12aba8be]" name="checkData" duration-ms="1" started-at="2020-06-22T14:19:12Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:19:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@12aba8be]" name="checkDB" duration-ms="4865" started-at="2020-06-22T14:19:12Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:19:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="36073" started-at="2020-06-22T14:19:17Z" finished-at="2020-06-22T14:19:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="2" started-at="2020-06-22T14:19:53Z" finished-at="2020-06-22T14:19:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="25056" started-at="2020-06-22T14:19:53Z" finished-at="2020-06-22T14:20:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@1e1a0406]" name="testPayOrder" duration-ms="5957" started-at="2020-06-22T14:20:18Z" finished-at="2020-06-22T14:20:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@1e1a0406]" name="checkData" duration-ms="1" started-at="2020-06-22T14:20:24Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:20:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@1e1a0406]" name="checkDB" duration-ms="4391" started-at="2020-06-22T14:20:24Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="19238" started-at="2020-06-22T14:20:28Z" finished-at="2020-06-22T14:20:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="40" started-at="2020-06-22T14:20:48Z" finished-at="2020-06-22T14:20:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="38461" started-at="2020-06-22T14:20:48Z" finished-at="2020-06-22T14:21:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@23c30a20]" name="testPayOrder" duration-ms="22812" started-at="2020-06-22T14:21:26Z" finished-at="2020-06-22T14:21:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@23c30a20]" name="checkData" duration-ms="0" started-at="2020-06-22T14:21:49Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:21:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@23c30a20]" name="checkDB" duration-ms="1" started-at="2020-06-22T14:21:49Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:21:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="20148" started-at="2020-06-22T14:21:49Z" finished-at="2020-06-22T14:22:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="4" started-at="2020-06-22T14:22:09Z" finished-at="2020-06-22T14:22:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="36171" started-at="2020-06-22T14:22:09Z" finished-at="2020-06-22T14:22:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@290222c1]" name="testPayOrder" duration-ms="6273" started-at="2020-06-22T14:22:45Z" finished-at="2020-06-22T14:22:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@290222c1]" name="checkData" duration-ms="1" started-at="2020-06-22T14:22:51Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:22:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@290222c1]" name="checkDB" duration-ms="5140" started-at="2020-06-22T14:22:51Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:22:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="21057" started-at="2020-06-22T14:22:57Z" finished-at="2020-06-22T14:23:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="2" started-at="2020-06-22T14:23:18Z" finished-at="2020-06-22T14:23:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="64718" started-at="2020-06-22T14:23:18Z" finished-at="2020-06-22T14:24:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@36916eb0]" name="testPayOrder" duration-ms="14921" started-at="2020-06-22T14:24:22Z" finished-at="2020-06-22T14:24:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@36916eb0]" name="checkData" duration-ms="128" started-at="2020-06-22T14:24:37Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:24:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@36916eb0]" name="checkDB" duration-ms="10542" started-at="2020-06-22T14:24:37Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:24:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="21299" started-at="2020-06-22T14:24:48Z" finished-at="2020-06-22T14:25:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="4" started-at="2020-06-22T14:25:09Z" finished-at="2020-06-22T14:25:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="23259" started-at="2020-06-22T14:25:09Z" finished-at="2020-06-22T14:25:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="FAIL" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@3cebbb30]" name="testPayOrder" duration-ms="1938" started-at="2020-06-22T14:25:33Z" finished-at="2020-06-22T14:25:34Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testCases.payment.TC_Pay_Order.testPayOrder(TC_Pay_Order.java:168)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="SKIP" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@3cebbb30]" name="checkData" duration-ms="0" started-at="2020-06-22T14:25:34Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:25:34Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method TC_Pay_Order.checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@3cebbb30] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method TC_Pay_Order.checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@3cebbb30] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="SKIP" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@3cebbb30]" name="checkDB" duration-ms="0" started-at="2020-06-22T14:25:34Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:25:34Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method TC_Pay_Order.checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@3cebbb30] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method TC_Pay_Order.checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@3cebbb30] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="28293" started-at="2020-06-22T14:25:34Z" finished-at="2020-06-22T14:26:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="1" started-at="2020-06-22T14:26:03Z" finished-at="2020-06-22T14:26:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="34379" started-at="2020-06-22T14:26:03Z" finished-at="2020-06-22T14:26:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@437da279]" name="testPayOrder" duration-ms="1011" started-at="2020-06-22T14:26:37Z" finished-at="2020-06-22T14:26:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@437da279]" name="checkData" duration-ms="1" started-at="2020-06-22T14:26:38Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:26:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@437da279]" name="checkDB" duration-ms="1" started-at="2020-06-22T14:26:38Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:26:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="19276" started-at="2020-06-22T14:26:38Z" finished-at="2020-06-22T14:26:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="3" started-at="2020-06-22T14:26:57Z" finished-at="2020-06-22T14:26:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="34360" started-at="2020-06-22T14:26:57Z" finished-at="2020-06-22T14:27:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@49049a04]" name="testPayOrder" duration-ms="6161" started-at="2020-06-22T14:27:32Z" finished-at="2020-06-22T14:27:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@49049a04]" name="checkData" duration-ms="1" started-at="2020-06-22T14:27:38Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:27:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@49049a04]" name="checkDB" duration-ms="5011" started-at="2020-06-22T14:27:38Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:27:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="21797" started-at="2020-06-22T14:27:43Z" finished-at="2020-06-22T14:28:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="271" started-at="2020-06-22T14:28:05Z" finished-at="2020-06-22T14:28:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="34933" started-at="2020-06-22T14:28:05Z" finished-at="2020-06-22T14:28:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@6253c26]" name="testPayOrder" duration-ms="6178" started-at="2020-06-22T14:28:40Z" finished-at="2020-06-22T14:28:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@6253c26]" name="checkData" duration-ms="1" started-at="2020-06-22T14:28:46Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:28:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@6253c26]" name="checkDB" duration-ms="5211" started-at="2020-06-22T14:28:46Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:28:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="19770" started-at="2020-06-22T14:28:51Z" finished-at="2020-06-22T14:29:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="2" started-at="2020-06-22T14:29:11Z" finished-at="2020-06-22T14:29:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="35236" started-at="2020-06-22T14:29:11Z" finished-at="2020-06-22T14:29:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@67f639d3]" name="testPayOrder" duration-ms="6023" started-at="2020-06-22T14:29:46Z" finished-at="2020-06-22T14:29:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@67f639d3]" name="checkData" duration-ms="0" started-at="2020-06-22T14:29:52Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:29:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@67f639d3]" name="checkDB" duration-ms="5535" started-at="2020-06-22T14:29:52Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:29:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="19744" started-at="2020-06-22T14:29:58Z" finished-at="2020-06-22T14:30:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="2" started-at="2020-06-22T14:30:18Z" finished-at="2020-06-22T14:30:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="35228" started-at="2020-06-22T14:30:18Z" finished-at="2020-06-22T14:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="FAIL" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="testPayOrder" duration-ms="1969" started-at="2020-06-22T14:30:53Z" finished-at="2020-06-22T14:30:55Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testCases.payment.TC_Pay_Order.testPayOrder(TC_Pay_Order.java:168)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="SKIP" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="checkData" duration-ms="1" started-at="2020-06-22T14:30:55Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:30:55Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method TC_Pay_Order.checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method TC_Pay_Order.checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="SKIP" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="checkDB" duration-ms="0" started-at="2020-06-22T14:30:55Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:30:55Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method TC_Pay_Order.checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method TC_Pay_Order.checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="20549" started-at="2020-06-22T14:30:55Z" finished-at="2020-06-22T14:31:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="setup()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="setup" is-config="true" duration-ms="2" started-at="2020-06-22T14:31:15Z" finished-at="2020-06-22T14:31:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="beforeClass" is-config="true" duration-ms="32565" started-at="2020-06-22T14:31:15Z" finished-at="2020-06-22T14:31:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testPayOrder()[pri:0, instance:testCases.payment.TC_Pay_Order@7bab3f1a]" name="testPayOrder" duration-ms="1031" started-at="2020-06-22T14:31:48Z" finished-at="2020-06-22T14:31:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPayOrder -->
        <test-method status="PASS" signature="checkData()[pri:0, instance:testCases.payment.TC_Pay_Order@7bab3f1a]" name="checkData" duration-ms="1" started-at="2020-06-22T14:31:49Z" depends-on-methods="testCases.payment.TC_Pay_Order.testPayOrder" finished-at="2020-06-22T14:31:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkData -->
        <test-method status="PASS" signature="checkDB()[pri:0, instance:testCases.payment.TC_Pay_Order@7bab3f1a]" name="checkDB" duration-ms="1" started-at="2020-06-22T14:31:49Z" depends-on-methods="testCases.payment.TC_Pay_Order.checkData" finished-at="2020-06-22T14:31:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDB -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testCases.payment.TC_Pay_Order@71a8adcf]" name="afterClass" is-config="true" duration-ms="19232" started-at="2020-06-22T14:31:49Z" finished-at="2020-06-22T14:32:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- testCases.payment.TC_Pay_Order -->
    </test> <!-- DANA Pulsa API Test Payment - Pay Order -->
  </suite> <!-- DANA Pulsa Suite -->
</testng-results>
